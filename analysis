#!/usr/bin/env bash
# --------------------------------------------------------------------
# Script: analysis
# Usage: ./analysis cleaned_dataset.tsv
# Description: Analyzes the cleaned board games dataset to answer four key questions:
#   1. What is the most popular game mechanic?
#   2. What is the most popular game domain?
#   3. What is the Pearson correlation between the year of publication and the average rating?
#   4. What is the Pearson correlation between the complexity of a game and its average rating?
#
#   The script assumes the input file has been cleaned using `preprocess`,
#   and is tab-separated with the required columns present.
# Author: Dhanyavi Goti[24096172]
# --------------------------------------------------------------------
input="$1"
# Anti-bugging: Check that a valid file was provided
if [[ ! -f "$input" ]]; then
  echo "Usage: $0 <cleaned_dataset.tsv>"
  exit 1
fi
# Use awk to process the cleaned dataset and compute:
# - Most frequent mechanics
# - Most frequent domain
# - Correlation between year and rating
# - Correlation between complexity and rating
awk -F'\t' '
# First row: detect column indices
NR==1 {
  for (i = 1; i <= NF; i++) {
    if ($i == "Mechanics") mechanics_col = i
    if ($i == "Domains") domains_col = i
    if ($i == "Year Published") year_col = i
    if ($i == "Rating Average") rating_col = i
    if ($i == "Complexity Average") complexity_col = i
  }
  next
}
{
  # Count mechanics frequency
  num_mechanics = split($mechanics_col, mechanics, /, */)
  for (i = 1; i <= num_mechanics; i++) {
    if (mechanics[i] != "") mechanics_freq[mechanics[i]]++
  }
  # Count domain frequency
  num_domains = split($domains_col, domain_list, /, */)
  for (i = 1; i <= num_domains; i++) {
    if (domain_list[i] != "") domains_freq[domain_list[i]]++
  }
  # Store Year Published and Rating Average for correlation
  if ($year_col != "" && $rating_col != "") {
    years[++year_index] = $year_col + 0
    ratings_year[year_index] = $rating_col + 0
  }
  # Store Complexity Average and Rating Average for correlation
  if ($complexity_col != "" && $rating_col != "") {
    complexity[++comp_index] = $complexity_col + 0
    ratings_comp[comp_index] = $rating_col + 0
  }
}
END {
  # --- Most popular mechanic ---
  most_mechanic = ""; max_mechanic_count = 0
  for (m in mechanics_freq) {
    if (mechanics_freq[m] > max_mechanic_count) {
      most_mechanic = m
      max_mechanic_count = mechanics_freq[m]
    }
  }
  printf("The most popular game mechanics is %s found in %d games\n", most_mechanic, max_mechanic_count)
  # --- Most popular domain ---
  most_domain = ""; max_domain_count = 0
  for (d in domains_freq) {
    if (domains_freq[d] > max_domain_count) {
      most_domain = d
      max_domain_count = domains_freq[d]
    }
  }
  printf("The most game domain is %s found in %d games\n", most_domain, max_domain_count)
  # --- Correlation: Year Published vs Rating Average ---
  n = year_index
  sum_x = sum_y = sum_xy = sum_x2 = sum_y2 = 0
  for (i = 1; i <= n; i++) {
    x = years[i]
    y = ratings_year[i]
    sum_x += x
    sum_y += y
    sum_xy += x * y
    sum_x2 += x * x
    sum_y2 += y * y
  }
  correlation_year_rating = (n * sum_xy - sum_x * sum_y) / sqrt((n * sum_x2 - sum_x^2) * (n * sum_y2 - sum_y^2))
  printf("The correlation between the year of publication and the average rating is %.3f\n", correlation_year_rating)
  # --- Correlation: Complexity Average vs Rating Average ---
  n = comp_index
  sum_x = sum_y = sum_xy = sum_x2 = sum_y2 = 0
  for (i = 1; i <= n; i++) {
    x = complexity[i]
    y = ratings_comp[i]
    sum_x += x
    sum_y += y
    sum_xy += x * y
    sum_x2 += x * x
    sum_y2 += y * y
  }
  correlation_complexity_rating = (n * sum_xy - sum_x * sum_y) / sqrt((n * sum_x2 - sum_x^2) * (n * sum_y2 - sum_y^2))
  printf("The correlation between the complexity of a game and its average rating is %.3f\n", correlation_complexity_rating)
}
' "$input"